name: Test examples
on: push

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/checkout@master
        with:
          submodules: "recursive"
      - name: "Install package manager"
        run: npm install -g pnpm
      - name: "Replace Plasmo version with workspace in examples"
        run: |
          pushd examples
          for d in *
          do
            test -d "$d" || continue
            pushd "$d"
            tmp=$(mktemp)
            jq '.devDependencies.plasmo = "workspace:*"' package.json > "$tmp" && mv "$tmp" package.json
            popd
          done
          popd
      - name: "Build local version of Plasmo"
        run: |
          pnpm i --no-frozen-lockfile
          pnpm --parallel --filter ./packages/** -r build
          pnpm run build:cli
          pnpm i
      - name: "Go to each example and try to build it"
        run: |
          pushd examples
          testBuildAndDev(){
            pnpm build
            rm -rf .plasmo
            rm -rf build
            timeout 10 pnpm dev || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi 
          }
          # initialize a semaphore with a given number of tokens
          open_sem(){
              mkfifo pipe-$$
              exec 3<>pipe-$$
              rm pipe-$$
              local i=$1
              for((;i>0;i--)); do
                  printf %s 000 >&3
              done
          }

          # run the given command asynchronously and pop/push tokens
          run_with_lock(){
              local x
              # this read waits until there is something to read
              read -u 3 -n 3 x && ((0==x)) || exit $x
              (
              ( "$@"; )
              # push the return code of the command to the semaphore
              printf '%.3d' $? >&3
              )&
          }

          N=4
          open_sem $N

          for d in *;
          do
            test -d "$d" || continue
            pushd "$d"
            run_with_lock testBuildAndDev
            popd
          done
          popd
